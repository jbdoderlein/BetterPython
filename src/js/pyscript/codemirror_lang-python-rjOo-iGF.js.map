{"version":3,"file":"codemirror_lang-python-rjOo-iGF.js","sources":["../node_modules/@lezer/lr/dist/index.js","../node_modules/@lezer/python/dist/index.js","../node_modules/@codemirror/lang-python/dist/index.js"],"sourcesContent":["import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/**\nA parse stack. These are used internally by the parser to track\nparsing progress. They also provide some properties and methods\nthat external code such as a tokenizer can use to get information\nabout the parse state.\n*/\nclass Stack {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The parse that this stack is part of @internal\n    */\n    p, \n    /**\n    Holds state, input pos, buffer index triplets for all but the\n    top state @internal\n    */\n    stack, \n    /**\n    The current parse state @internal\n    */\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /**\n    @internal\n    */\n    reducePos, \n    /**\n    The input position up to which this stack has parsed.\n    */\n    pos, \n    /**\n    The dynamic score of the stack, including dynamic precedence\n    and error-recovery penalties\n    @internal\n    */\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /**\n    @internal\n    */\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /**\n    @internal\n    */\n    bufferBase, \n    /**\n    @internal\n    */\n    curContext, \n    /**\n    @internal\n    */\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /**\n    @internal\n    */\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /**\n    @internal\n    */\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /**\n    The stack's current [context](#lr.ContextTracker) value, if\n    any. Its type will depend on the context tracker's type\n    parameter, or it will be `null` if there is no context\n    tracker.\n    */\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /**\n    @internal\n    */\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /**\n    @internal\n    */\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        if (this.reducePos < this.pos - 25 /* Lookahead.Margin */)\n            this.setLookAhead(this.pos);\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special caseâ€”they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /**\n    @internal\n    */\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /**\n    @internal\n    */\n    shift(action, type, start, end) {\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (end > this.pos || type <= parser.maxNode) {\n                this.pos = end;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = end;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(type, start);\n            if (type <= parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = end;\n            this.shiftContext(type, start);\n            if (type <= this.p.parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n    }\n    // Apply an action\n    /**\n    @internal\n    */\n    apply(action, next, nextStart, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextStart, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /**\n    @internal\n    */\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /**\n    @internal\n    */\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /**\n    @internal\n    */\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /**\n    Check if the given term would be able to be shifted (optionally\n    after some reductions) on this stack. This can be useful for\n    external tokenizers that want to make sure they only provide a\n    given token when it applies.\n    */\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /**\n    @internal\n    */\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.reducePos = this.pos;\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /**\n    @internal\n    */\n    forceReduce() {\n        let { parser } = this.p;\n        let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {\n                let backup = this.findForcedReduction();\n                if (backup == null)\n                    return false;\n                reduce = backup;\n            }\n            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /**\n    Try to scan through the automaton to find some kind of reduction\n    that can be applied. Used when the regular ForcedReduce field\n    isn't a valid action. @internal\n    */\n    findForcedReduction() {\n        let { parser } = this.p, seen = [];\n        let explore = (state, depth) => {\n            if (seen.includes(state))\n                return;\n            seen.push(state);\n            return parser.allActions(state, (action) => {\n                if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;\n                else if (action & 65536 /* Action.ReduceFlag */) {\n                    let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;\n                    if (rDepth > 1) {\n                        let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;\n                        if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)\n                            return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;\n                    }\n                }\n                else {\n                    let found = explore(action, depth + 1);\n                    if (found != null)\n                        return found;\n                }\n            });\n        };\n        return explore(this.state, 0);\n    }\n    /**\n    @internal\n    */\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /**\n    Check whether this state has no further actions (assumed to be a direct descendant of the\n    top state, since any other states must be able to continue\n    somehow). @internal\n    */\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /**\n    Restart the stack (put it back in its start state). Only safe\n    when this.stack.length == 3 (state is directly below the top\n    state). @internal\n    */\n    restart() {\n        this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /**\n    @internal\n    */\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /**\n    Get the parser used by this stack.\n    */\n    get parser() { return this.p.parser; }\n    /**\n    Test whether a given dialect (by numeric ID, as exported from\n    the terms file) is enabled.\n    */\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /**\n    @internal\n    */\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);\n    }\n    /**\n    @internal\n    */\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.pos, this.pos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /**\n    @internal\n    */\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /**\n    @internal\n    */\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/**\n[Tokenizers](#lr.ExternalTokenizer) interact with the input\nthrough this interface. It presents the input as a stream of\ncharacters, tracking lookahead and hiding the complexity of\n[ranges](#common.Parser.parse^ranges) from tokenizer code.\n*/\nclass InputStream {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    input, \n    /**\n    @internal\n    */\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /**\n        @internal\n        */\n        this.chunk = \"\";\n        /**\n        @internal\n        */\n        this.chunkOff = 0;\n        /**\n        Backup chunk\n        */\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /**\n        The character code of the next code unit in the input, or -1\n        when the stream is at the end of the input.\n        */\n        this.next = -1;\n        /**\n        @internal\n        */\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /**\n    @internal\n    */\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /**\n    @internal\n    */\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /**\n    Look at a code unit near the stream position. `.peek(0)` equals\n    `.next`, `.peek(-1)` gives you the previous character, and so\n    on.\n    \n    Note that looking around during tokenizing creates dependencies\n    on potentially far-away content, which may reduce the\n    effectiveness incremental parsingâ€”when looking forwardâ€”or even\n    cause invalid reparses when looking backward more than 25 code\n    units, since the library does not track lookbehind.\n    */\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /**\n    Accept a token. By default, the end of the token is set to the\n    current stream position, but you can pass an offset (relative to\n    the stream position) to change that.\n    */\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    /**\n    Accept a token ending at a specific given position.\n    */\n    acceptTokenTo(token, endPos) {\n        this.token.value = token;\n        this.token.end = endPos;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /**\n    Move the stream forward N (defaults to 1) code units. Returns\n    the new value of [`next`](#lr.InputStream.next).\n    */\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /**\n    @internal\n    */\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /**\n    @internal\n    */\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/**\n@internal\n*/\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n@hide\n*/\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, skipped = 0;\n        for (;;) {\n            let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (!atEof)\n                skipped++;\n            if (nextPos == null)\n                break;\n            input.reset(nextPos, input.token);\n        }\n        if (skipped) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, skipped);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n`@external tokens` declarations in the grammar should resolve to\nan instance of this class.\n*/\nclass ExternalTokenizer {\n    /**\n    Create a tokenizer. The first argument is the function that,\n    given an input stream, scans for the types of tokens it\n    recognizes at the stream's position, and calls\n    [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    one.\n    */\n    constructor(\n    /**\n    @internal\n    */\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Lookahead.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Finish with \" + this.stackID(finished));\n                return this.stackToTree(finished);\n            }\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Force-finish \" + this.stackID(finished));\n                return this.stackToTree(finished.forceAll());\n            }\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 8400 /* Rec.CutDepth */) {\n            while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            let main = this.tokens.mainToken;\n            localStack.apply(action, term, main ? main.start : localStack.pos, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/**\nContext trackers are used to track stateful context (such as\nindentation in the Python grammar, or parent elements in the XML\ngrammar) needed by external tokenizers. You declare them in a\ngrammar file as `@context exportName from \"module\"`.\n\nContext values should be immutable, and can be updated (replaced)\non shift or reduce actions.\n\nThe export used in a `@context` declaration should be of this\ntype.\n*/\nclass ContextTracker {\n    /**\n    Define a context tracker.\n    */\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/**\nHolds the parse tables for a given grammar, as generated by\n`lezer-generator`, and provides [methods](#common.Parser) to parse\ncontent with.\n*/\nclass LRParser extends Parser {\n    /**\n    @internal\n    */\n    constructor(spec) {\n        super();\n        /**\n        @internal\n        */\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /**\n    Get a goto table entry @internal\n    */\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /**\n    Check if this state has an action for a given terminal @internal\n    */\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /**\n    @internal\n    */\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /**\n    @internal\n    */\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /**\n    @internal\n    */\n    validAction(state, action) {\n        return !!this.allActions(state, a => a == action ? true : null);\n    }\n    /**\n    @internal\n    */\n    allActions(state, action) {\n        let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);\n        let result = deflt ? action(deflt) : undefined;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            result = action(pair(this.data, i + 1));\n        }\n        return result;\n    }\n    /**\n    Get the states that can follow this one through shift actions or\n    goto jumps. @internal\n    */\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /**\n    Configure the parser. Returns a new parser instance that has the\n    given settings modified. Settings not provided in `config` are\n    kept from the original parser.\n    */\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /**\n    Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    are registered for this parser.\n    */\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /**\n    Returns the name associated with a given term. This will only\n    work for all terms when the parser was generated with the\n    `--names` option. By default, only the names of tagged terms are\n    stored.\n    */\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /**\n    The eof term id is always allocated directly after the node\n    types. @internal\n    */\n    get eofTerm() { return this.maxNode + 1; }\n    /**\n    The type of top node produced by the parser.\n    */\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /**\n    @internal\n    */\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /**\n    @internal\n    */\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /**\n    Used by the output of the parser generator. Not available to\n    user code. @hide\n    */\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n","import { ExternalTokenizer, ContextTracker, LRParser } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst printKeyword = 1,\n  indent = 194,\n  dedent = 195,\n  newline$1 = 196,\n  blankLineStart = 197,\n  newlineBracketed = 198,\n  eof = 199,\n  stringContent = 200,\n  Escape = 2,\n  replacementStart = 3,\n  stringEnd = 201,\n  ParenL = 24,\n  ParenthesizedExpression = 25,\n  TupleExpression = 49,\n  ComprehensionExpression = 50,\n  BracketL = 55,\n  ArrayExpression = 56,\n  ArrayComprehensionExpression = 57,\n  BraceL = 59,\n  DictionaryExpression = 60,\n  DictionaryComprehensionExpression = 61,\n  SetExpression = 62,\n  SetComprehensionExpression = 63,\n  ArgList = 65,\n  subscript = 238,\n  String$1 = 71,\n  stringStart = 241,\n  stringStartD = 242,\n  stringStartL = 243,\n  stringStartLD = 244,\n  stringStartR = 245,\n  stringStartRD = 246,\n  stringStartRL = 247,\n  stringStartRLD = 248,\n  FormatString = 72,\n  stringStartF = 249,\n  stringStartFD = 250,\n  stringStartFL = 251,\n  stringStartFLD = 252,\n  stringStartFR = 253,\n  stringStartFRD = 254,\n  stringStartFRL = 255,\n  stringStartFRLD = 256,\n  FormatReplacement = 73,\n  nestedFormatReplacement = 77,\n  importList = 263,\n  TypeParamList = 112,\n  ParamList = 130,\n  SequencePattern = 151,\n  MappingPattern = 152,\n  PatternArgList = 155;\n\nconst newline = 10, carriageReturn = 13, space = 32, tab = 9, hash = 35, parenOpen = 40, dot = 46,\n      braceOpen = 123, braceClose = 125, singleQuote = 39, doubleQuote = 34, backslash = 92,\n      letter_o = 111, letter_x = 120, letter_N = 78, letter_u = 117, letter_U = 85;\n\nconst bracketed = new Set([\n  ParenthesizedExpression, TupleExpression, ComprehensionExpression, importList, ArgList, ParamList,\n  ArrayExpression, ArrayComprehensionExpression, subscript,\n  SetExpression, SetComprehensionExpression, FormatString, FormatReplacement, nestedFormatReplacement,\n  DictionaryExpression, DictionaryComprehensionExpression,\n  SequencePattern, MappingPattern, PatternArgList, TypeParamList\n]);\n\nfunction isLineBreak(ch) {\n  return ch == newline || ch == carriageReturn\n}\n\nfunction isHex(ch) {\n  return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n}\n\nconst newlines = new ExternalTokenizer((input, stack) => {\n  let prev;\n  if (input.next < 0) {\n    input.acceptToken(eof);\n  } else if (stack.context.flags & cx_Bracketed) {\n    if (isLineBreak(input.next)) input.acceptToken(newlineBracketed, 1);\n  } else if (((prev = input.peek(-1)) < 0 || isLineBreak(prev)) &&\n             stack.canShift(blankLineStart)) {\n    let spaces = 0;\n    while (input.next == space || input.next == tab) { input.advance(); spaces++; }\n    if (input.next == newline || input.next == carriageReturn || input.next == hash)\n      input.acceptToken(blankLineStart, -spaces);\n  } else if (isLineBreak(input.next)) {\n    input.acceptToken(newline$1, 1);\n  }\n}, {contextual: true});\n\nconst indentation = new ExternalTokenizer((input, stack) => {\n  let context = stack.context;\n  if (context.flags) return\n  let prev = input.peek(-1);\n  if (prev == newline || prev == carriageReturn) {\n    let depth = 0, chars = 0;\n    for (;;) {\n      if (input.next == space) depth++;\n      else if (input.next == tab) depth += 8 - (depth % 8);\n      else break\n      input.advance();\n      chars++;\n    }\n    if (depth != context.indent &&\n        input.next != newline && input.next != carriageReturn && input.next != hash) {\n      if (depth < context.indent) input.acceptToken(dedent, -chars);\n      else input.acceptToken(indent);\n    }\n  }\n});\n\n// Flags used in Context objects\nconst cx_Bracketed = 1, cx_String = 2, cx_DoubleQuote = 4, cx_Long = 8, cx_Raw = 16, cx_Format = 32;\n\nfunction Context(parent, indent, flags) {\n  this.parent = parent;\n  this.indent = indent;\n  this.flags = flags;\n  this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + indent + (indent << 4) + flags + (flags << 6);\n}\n\nconst topIndent = new Context(null, 0, 0);\n\nfunction countIndent(space) {\n  let depth = 0;\n  for (let i = 0; i < space.length; i++)\n    depth += space.charCodeAt(i) == tab ? 8 - (depth % 8) : 1;\n  return depth\n}\n\nconst stringFlags = new Map([\n  [stringStart, 0],\n  [stringStartD, cx_DoubleQuote],\n  [stringStartL, cx_Long],\n  [stringStartLD, cx_Long | cx_DoubleQuote],\n  [stringStartR, cx_Raw],\n  [stringStartRD, cx_Raw | cx_DoubleQuote],\n  [stringStartRL, cx_Raw | cx_Long],\n  [stringStartRLD, cx_Raw | cx_Long | cx_DoubleQuote],\n  [stringStartF, cx_Format],\n  [stringStartFD, cx_Format | cx_DoubleQuote],\n  [stringStartFL, cx_Format | cx_Long],\n  [stringStartFLD, cx_Format | cx_Long | cx_DoubleQuote],\n  [stringStartFR, cx_Format | cx_Raw],\n  [stringStartFRD, cx_Format | cx_Raw | cx_DoubleQuote],\n  [stringStartFRL, cx_Format | cx_Raw | cx_Long],\n  [stringStartFRLD, cx_Format | cx_Raw | cx_Long | cx_DoubleQuote]\n].map(([term, flags]) => [term, flags | cx_String]));\n\nconst trackIndent = new ContextTracker({\n  start: topIndent,\n  reduce(context, term, _, input) {\n    if ((context.flags & cx_Bracketed) && bracketed.has(term) ||\n        (term == String$1 || term == FormatString) && (context.flags & cx_String))\n      return context.parent\n    return context\n  },\n  shift(context, term, stack, input) {\n    if (term == indent)\n      return new Context(context, countIndent(input.read(input.pos, stack.pos)), 0)\n    if (term == dedent)\n      return context.parent\n    if (term == ParenL || term == BracketL || term == BraceL || term == replacementStart)\n      return new Context(context, 0, cx_Bracketed)\n    if (stringFlags.has(term))\n      return new Context(context, 0, stringFlags.get(term) | (context.flags & cx_Bracketed))\n    return context\n  },\n  hash(context) { return context.hash }\n});\n\nconst legacyPrint = new ExternalTokenizer(input => {\n  for (let i = 0; i < 5; i++) {\n    if (input.next != \"print\".charCodeAt(i)) return\n    input.advance();\n  }\n  if (/\\w/.test(String.fromCharCode(input.next))) return\n  for (let off = 0;; off++) {\n    let next = input.peek(off);\n    if (next == space || next == tab) continue\n    if (next != parenOpen && next != dot && next != newline && next != carriageReturn && next != hash)\n      input.acceptToken(printKeyword);\n    return\n  }\n});\n\nconst strings = new ExternalTokenizer((input, stack) => {\n  let {flags} = stack.context;\n  let quote = (flags & cx_DoubleQuote) ? doubleQuote : singleQuote;\n  let long = (flags & cx_Long) > 0;\n  let escapes = !(flags & cx_Raw);\n  let format = (flags & cx_Format) > 0;\n\n  let start = input.pos;\n  for (;;) {\n    if (input.next < 0) {\n      break\n    } else if (format && input.next == braceOpen) {\n      if (input.peek(1) == braceOpen) {\n        input.advance(2);\n      } else {\n        if (input.pos == start) {\n          input.acceptToken(replacementStart, 1);\n          return\n        }\n        break\n      }\n    } else if (escapes && input.next == backslash) {\n      if (input.pos == start) {\n        input.advance();\n        let escaped = input.next;\n        if (escaped >= 0) {\n          input.advance();\n          skipEscape(input, escaped);\n        }\n        input.acceptToken(Escape);\n        return\n      }\n      break\n    } else if (input.next == quote && (!long || input.peek(1) == quote && input.peek(2) == quote)) {\n      if (input.pos == start) {\n        input.acceptToken(stringEnd, long ? 3 : 1);\n        return\n      }\n      break\n    } else if (input.next == newline) {\n      if (long) {\n        input.advance();\n      } else if (input.pos == start) {\n        input.acceptToken(stringEnd);\n        return\n      }\n      break\n    } else {\n      input.advance();\n    }\n  }\n  if (input.pos > start) input.acceptToken(stringContent);\n});\n\nfunction skipEscape(input, ch) {\n  if (ch == letter_o) {\n    for (let i = 0; i < 2 && input.next >= 48 && input.next <= 55; i++) input.advance();\n  } else if (ch == letter_x) {\n    for (let i = 0; i < 2 && isHex(input.next); i++) input.advance();\n  } else if (ch == letter_u) {\n    for (let i = 0; i < 4 && isHex(input.next); i++) input.advance();\n  } else if (ch == letter_U) {\n    for (let i = 0; i < 8 && isHex(input.next); i++) input.advance();\n  } else if (ch == letter_N) {\n    if (input.next == braceOpen) {\n      input.advance();\n      while (input.next >= 0 && input.next != braceClose && input.next != singleQuote &&\n             input.next != doubleQuote && input.next != newline) input.advance();\n      if (input.next == braceClose) input.advance();\n    }\n  }\n}\n\nconst pythonHighlighting = styleTags({\n  \"async \\\"*\\\" \\\"**\\\" FormatConversion FormatSpec\": tags.modifier,\n  \"for while if elif else try except finally return raise break continue with pass assert await yield match case\": tags.controlKeyword,\n  \"in not and or is del\": tags.operatorKeyword,\n  \"from def class global nonlocal lambda\": tags.definitionKeyword,\n  import: tags.moduleKeyword,\n  \"with as print\": tags.keyword,\n  Boolean: tags.bool,\n  None: tags.null,\n  VariableName: tags.variableName,\n  \"CallExpression/VariableName\": tags.function(tags.variableName),\n  \"FunctionDefinition/VariableName\": tags.function(tags.definition(tags.variableName)),\n  \"ClassDefinition/VariableName\": tags.definition(tags.className),\n  PropertyName: tags.propertyName,\n  \"CallExpression/MemberExpression/PropertyName\": tags.function(tags.propertyName),\n  Comment: tags.lineComment,\n  Number: tags.number,\n  String: tags.string,\n  FormatString: tags.special(tags.string),\n  Escape: tags.escape,\n  UpdateOp: tags.updateOperator,\n  \"ArithOp!\": tags.arithmeticOperator,\n  BitOp: tags.bitwiseOperator,\n  CompareOp: tags.compareOperator,\n  AssignOp: tags.definitionOperator,\n  Ellipsis: tags.punctuation,\n  At: tags.meta,\n  \"( )\": tags.paren,\n  \"[ ]\": tags.squareBracket,\n  \"{ }\": tags.brace,\n  \".\": tags.derefOperator,\n  \", ;\": tags.separator\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_identifier = {__proto__:null,await:44, or:54, and:56, in:60, not:62, is:64, if:70, else:72, lambda:76, yield:94, from:96, async:102, for:104, None:162, True:164, False:164, del:178, pass:182, break:186, continue:190, return:194, raise:202, import:206, as:208, global:212, nonlocal:214, assert:218, type:223, elif:236, while:240, try:246, except:248, finally:250, with:254, def:258, class:268, match:279, case:285};\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \"##jO`QeOOP$}OSOOO&WQtO'#HUOOQS'#Co'#CoOOQS'#Cp'#CpO'vQdO'#CnO*UQtO'#HTOOQS'#HU'#HUOOQS'#DU'#DUOOQS'#HT'#HTO*rQdO'#D_O+VQdO'#DfO+gQdO'#DjO+zOWO'#DuO,VOWO'#DvO.[QtO'#GuOOQS'#Gu'#GuO'vQdO'#GtO0ZQtO'#GtOOQS'#Eb'#EbO0rQdO'#EcOOQS'#Gs'#GsO0|QdO'#GrOOQV'#Gr'#GrO1XQdO'#FYOOQS'#G^'#G^O1^QdO'#FXOOQV'#IS'#ISOOQV'#Gq'#GqOOQV'#Fq'#FqQ`QeOOO'vQdO'#CqO1lQdO'#C}O1sQdO'#DRO2RQdO'#HYO2cQtO'#EVO'vQdO'#EWOOQS'#EY'#EYOOQS'#E['#E[OOQS'#E^'#E^O2wQdO'#E`O3_QdO'#EdO3rQdO'#EfO3zQtO'#EfO1XQdO'#EiO0rQdO'#ElO1XQdO'#EnO0rQdO'#EtO0rQdO'#EwO4VQdO'#EyO4^QdO'#FOO4iQdO'#EzO0rQdO'#FOO1XQdO'#FQO1XQdO'#FVO4nQdO'#F[P4uOdO'#GpPOOO)CBd)CBdOOQS'#Ce'#CeOOQS'#Cf'#CfOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Cl'#ClO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO5QQdO'#DoOOQS,5:Y,5:YO5eQdO'#HdOOQS,5:],5:]O5rQ!fO,5:]O5wQtO,59YO1lQdO,59bO1lQdO,59bO1lQdO,59bO8gQdO,59bO8lQdO,59bO8sQdO,59jO8zQdO'#HTO:QQdO'#HSOOQS'#HS'#HSOOQS'#D['#D[O:iQdO,59aO'vQdO,59aO:wQdO,59aOOQS,59y,59yO:|QdO,5:RO'vQdO,5:ROOQS,5:Q,5:QO;[QdO,5:QO;aQdO,5:XO'vQdO,5:XO'vQdO,5:VOOQS,5:U,5:UO;rQdO,5:UO;wQdO,5:WOOOW'#Fy'#FyO;|OWO,5:aOOQS,5:a,5:aO<XQdO'#HwOOOW'#Dw'#DwOOOW'#Fz'#FzO<iOWO,5:bOOQS,5:b,5:bOOQS'#F}'#F}O<wQtO,5:iO?iQtO,5=`O@SQ#xO,5=`O@sQtO,5=`OOQS,5:},5:}OA[QeO'#GWOBnQdO,5;^OOQV,5=^,5=^OByQtO'#IPOChQdO,5;tOOQS-E:[-E:[OOQV,5;s,5;sO4dQdO'#FQOOQV-E9o-E9oOCpQtO,59]OEwQtO,59iOFbQdO'#HVOFmQdO'#HVO1XQdO'#HVOFxQdO'#DTOGQQdO,59mOGVQdO'#HZO'vQdO'#HZO0rQdO,5=tOOQS,5=t,5=tO0rQdO'#EROOQS'#ES'#ESOGtQdO'#GPOHUQdO,58|OHUQdO,58|O*xQdO,5:oOHdQtO'#H]OOQS,5:r,5:rOOQS,5:z,5:zOHwQdO,5;OOIYQdO'#IOO1XQdO'#H}OOQS,5;Q,5;QOOQS'#GT'#GTOInQtO,5;QOI|QdO,5;QOJRQdO'#IQOOQS,5;T,5;TOJaQdO'#H|OOQS,5;W,5;WOJrQdO,5;YO4iQdO,5;`O4iQdO,5;cOJzQtO'#ITO'vQdO'#ITOKUQdO,5;eO4VQdO,5;eO0rQdO,5;jO1XQdO,5;lOKZQeO'#EuOLgQgO,5;fO!!hQdO'#IUO4iQdO,5;jO!!sQdO,5;lO!!{QdO,5;qO!#WQtO,5;vO'vQdO,5;vPOOO,5=[,5=[P!#_OSO,5=[P!#dOdO,5=[O!&XQtO1G.jO!&`QtO1G.jO!)PQtO1G.jO!)ZQtO1G.jO!+tQtO1G.jO!,XQtO1G.jO!,lQdO'#HcO!,zQtO'#GuO0rQdO'#HcO!-UQdO'#HbOOQS,5:Z,5:ZO!-^QdO,5:ZO!-cQdO'#HeO!-nQdO'#HeO!.RQdO,5>OOOQS'#Ds'#DsOOQS1G/w1G/wOOQS1G.|1G.|O!/RQtO1G.|O!/YQtO1G.|O1lQdO1G.|O!/uQdO1G/UOOQS'#DZ'#DZO0rQdO,59tOOQS1G.{1G.{O!/|QdO1G/eO!0^QdO1G/eO!0fQdO1G/fO'vQdO'#H[O!0kQdO'#H[O!0pQtO1G.{O!1QQdO,59iO!2WQdO,5=zO!2hQdO,5=zO!2pQdO1G/mO!2uQtO1G/mOOQS1G/l1G/lO!3VQdO,5=uO!3|QdO,5=uO0rQdO1G/qO!4kQdO1G/sO!4pQtO1G/sO!5QQtO1G/qOOQS1G/p1G/pOOQS1G/r1G/rOOOW-E9w-E9wOOQS1G/{1G/{O!5bQdO'#HxO0rQdO'#HxO!5sQdO,5>cOOOW-E9x-E9xOOQS1G/|1G/|OOQS-E9{-E9{O!6RQ#xO1G2zO!6rQtO1G2zO'vQdO,5<jOOQS,5<j,5<jOOQS-E9|-E9|OOQS,5<r,5<rOOQS-E:U-E:UOOQV1G0x1G0xO1XQdO'#GRO!7ZQtO,5>kOOQS1G1`1G1`O!7xQdO1G1`OOQS'#DV'#DVO0rQdO,5=qOOQS,5=q,5=qO!7}QdO'#FrO!8YQdO,59oO!8bQdO1G/XO!8lQtO,5=uOOQS1G3`1G3`OOQS,5:m,5:mO!9]QdO'#GtOOQS,5<k,5<kOOQS-E9}-E9}O!9nQdO1G.hOOQS1G0Z1G0ZO!9|QdO,5=wO!:^QdO,5=wO0rQdO1G0jO0rQdO1G0jO!:oQdO,5>jO!;QQdO,5>jO1XQdO,5>jO!;cQdO,5>iOOQS-E:R-E:RO!;hQdO1G0lO!;sQdO1G0lO!;xQdO,5>lO!<WQdO,5>lO!<fQdO,5>hO!<|QdO,5>hO!=_QdO'#EpO0rQdO1G0tO!=jQdO1G0tO!=oQgO1G0zO!AmQgO1G0}O!EhQdO,5>oO!ErQdO,5>oO!EzQtO,5>oO0rQdO1G1PO!FUQdO1G1PO4iQdO1G1UO!!sQdO1G1WOOQV,5;a,5;aO!FZQfO,5;aO!F`QgO1G1QO!JaQdO'#GZO4iQdO1G1QO4iQdO1G1QO!JqQdO,5>pO!KOQdO,5>pO1XQdO,5>pOOQV1G1U1G1UO!KWQdO'#FSO!KiQ!fO1G1WO!KqQdO1G1WOOQV1G1]1G1]O4iQdO1G1]O!KvQdO1G1]O!LOQdO'#F^OOQV1G1b1G1bO!#WQtO1G1bPOOO1G2v1G2vP!LTOSO1G2vOOQS,5=},5=}OOQS'#Dp'#DpO0rQdO,5=}O!LYQdO,5=|O!LmQdO,5=|OOQS1G/u1G/uO!LuQdO,5>PO!MVQdO,5>PO!M_QdO,5>PO!MrQdO,5>PO!NSQdO,5>POOQS1G3j1G3jOOQS7+$h7+$hO!8bQdO7+$pO# uQdO1G.|O# |QdO1G.|OOQS1G/`1G/`OOQS,5<`,5<`O'vQdO,5<`OOQS7+%P7+%PO#!TQdO7+%POOQS-E9r-E9rOOQS7+%Q7+%QO#!eQdO,5=vO'vQdO,5=vOOQS7+$g7+$gO#!jQdO7+%PO#!rQdO7+%QO#!wQdO1G3fOOQS7+%X7+%XO##XQdO1G3fO##aQdO7+%XOOQS,5<_,5<_O'vQdO,5<_O##fQdO1G3aOOQS-E9q-E9qO#$]QdO7+%]OOQS7+%_7+%_O#$kQdO1G3aO#%YQdO7+%_O#%_QdO1G3gO#%oQdO1G3gO#%wQdO7+%]O#%|QdO,5>dO#&gQdO,5>dO#&gQdO,5>dOOQS'#Dx'#DxO#&xO&jO'#DzO#'TO`O'#HyOOOW1G3}1G3}O#'YQdO1G3}O#'bQdO1G3}O#'mQ#xO7+(fO#(^QtO1G2UP#(wQdO'#GOOOQS,5<m,5<mOOQS-E:P-E:POOQS7+&z7+&zOOQS1G3]1G3]OOQS,5<^,5<^OOQS-E9p-E9pOOQS7+$s7+$sO#)UQdO,5=`O#)oQdO,5=`O#*QQtO,5<aO#*eQdO1G3cOOQS-E9s-E9sOOQS7+&U7+&UO#*uQdO7+&UO#+TQdO,5<nO#+iQdO1G4UOOQS-E:Q-E:QO#+zQdO1G4UOOQS1G4T1G4TOOQS7+&W7+&WO#,]QdO7+&WOOQS,5<p,5<pO#,hQdO1G4WOOQS-E:S-E:SOOQS,5<l,5<lO#,vQdO1G4SOOQS-E:O-E:OO1XQdO'#EqO#-^QdO'#EqO#-iQdO'#IRO#-qQdO,5;[OOQS7+&`7+&`O0rQdO7+&`O#-vQgO7+&fO!JdQdO'#GXO4iQdO7+&fO4iQdO7+&iO#1tQtO,5<tO'vQdO,5<tO#2OQdO1G4ZOOQS-E:W-E:WO#2YQdO1G4ZO4iQdO7+&kO0rQdO7+&kOOQV7+&p7+&pO!KiQ!fO7+&rO!KqQdO7+&rO`QeO1G0{OOQV-E:X-E:XO4iQdO7+&lO4iQdO7+&lOOQV,5<u,5<uO#2bQdO,5<uO!JdQdO,5<uOOQV7+&l7+&lO#2mQgO7+&lO#6hQdO,5<vO#6sQdO1G4[OOQS-E:Y-E:YO#7QQdO1G4[O#7YQdO'#IWO#7hQdO'#IWO1XQdO'#IWOOQS'#IW'#IWO#7sQdO'#IVOOQS,5;n,5;nO#7{QdO,5;nO0rQdO'#FUOOQV7+&r7+&rO4iQdO7+&rOOQV7+&w7+&wO4iQdO7+&wO#8QQfO,5;xOOQV7+&|7+&|POOO7+(b7+(bO#8VQdO1G3iOOQS,5<c,5<cO#8eQdO1G3hOOQS-E9u-E9uO#8xQdO,5<dO#9TQdO,5<dO#9hQdO1G3kOOQS-E9v-E9vO#9xQdO1G3kO#:QQdO1G3kO#:bQdO1G3kO#9xQdO1G3kOOQS<<H[<<H[O#:mQtO1G1zOOQS<<Hk<<HkP#:zQdO'#FtO8sQdO1G3bO#;XQdO1G3bO#;^QdO<<HkOOQS<<Hl<<HlO#;nQdO7+)QOOQS<<Hs<<HsO#<OQtO1G1yP#<oQdO'#FsO#<|QdO7+)RO#=^QdO7+)RO#=fQdO<<HwO#=kQdO7+({OOQS<<Hy<<HyO#>bQdO,5<bO'vQdO,5<bOOQS-E9t-E9tOOQS<<Hw<<HwOOQS,5<g,5<gO0rQdO,5<gO#>gQdO1G4OOOQS-E9y-E9yO#?QQdO1G4OO<XQdO'#H{OOOO'#D{'#D{OOOO'#F|'#F|O#?cO&jO,5:fOOOW,5>e,5>eOOOW7+)i7+)iO#?nQdO7+)iO#?vQdO1G2zO#@aQdO1G2zP'vQdO'#FuO0rQdO<<IpO1XQdO1G2YP1XQdO'#GSO#@rQdO7+)pO#ATQdO7+)pOOQS<<Ir<<IrP1XQdO'#GUP0rQdO'#GQOOQS,5;],5;]O#AfQdO,5>mO#AtQdO,5>mOOQS1G0v1G0vOOQS<<Iz<<IzOOQV-E:V-E:VO4iQdO<<JQOOQV,5<s,5<sO4iQdO,5<sOOQV<<JQ<<JQOOQV<<JT<<JTO#A|QtO1G2`P#BWQdO'#GYO#B_QdO7+)uO#BiQgO<<JVO4iQdO<<JVOOQV<<J^<<J^O4iQdO<<J^O!KiQ!fO<<J^O#FdQgO7+&gOOQV<<JW<<JWO#FnQgO<<JWOOQV1G2a1G2aO1XQdO1G2aO#JiQdO1G2aO4iQdO<<JWO1XQdO1G2bP0rQdO'#G[O#JtQdO7+)vO#KRQdO7+)vOOQS'#FT'#FTO0rQdO,5>rO#KZQdO,5>rOOQS,5>r,5>rO#KfQdO,5>qO#KwQdO,5>qOOQS1G1Y1G1YOOQS,5;p,5;pOOQV<<Jc<<JcO#LPQdO1G1dOOQS7+)T7+)TP#LUQdO'#FwO#LfQdO1G2OO#LyQdO1G2OO#MZQdO1G2OP#MfQdO'#FxO#MsQdO7+)VO#NTQdO7+)VO#NTQdO7+)VO#N]QdO7+)VO#NmQdO7+(|O8sQdO7+(|OOQSAN>VAN>VO$ WQdO<<LmOOQSAN>cAN>cO0rQdO1G1|O$ hQtO1G1|P$ rQdO'#FvOOQS1G2R1G2RP$!PQdO'#F{O$!^QdO7+)jO$!wQdO,5>gOOOO-E9z-E9zOOOW<<MT<<MTO$#VQdO7+(fOOQSAN?[AN?[OOQS7+'t7+'tO$#pQdO<<M[OOQS,5<q,5<qO$$RQdO1G4XOOQS-E:T-E:TOOQVAN?lAN?lOOQV1G2_1G2_O4iQdOAN?qO$$aQgOAN?qOOQVAN?xAN?xO4iQdOAN?xOOQV<<JR<<JRO4iQdOAN?rO4iQdO7+'{OOQV7+'{7+'{O1XQdO7+'{OOQVAN?rAN?rOOQS7+'|7+'|O$([QdO<<MbOOQS1G4^1G4^O0rQdO1G4^OOQS,5<w,5<wO$(iQdO1G4]OOQS-E:Z-E:ZOOQU'#G_'#G_O$(zQfO7+'OO$)VQdO'#F_O$*^QdO7+'jO$*nQdO7+'jOOQS7+'j7+'jO$*yQdO<<LqO$+ZQdO<<LqO$+ZQdO<<LqO$+cQdO'#H^OOQS<<Lh<<LhO$+mQdO<<LhOOQS7+'h7+'hOOQS'#D|'#D|OOOO1G4R1G4RO$,WQdO1G4RO$,`QdO1G4RP!=_QdO'#GVOOQVG25]G25]O4iQdOG25]OOQVG25dG25dOOQVG25^G25^OOQV<<Kg<<KgO4iQdO<<KgOOQS7+)x7+)xP$,kQdO'#G]OOQU-E:]-E:]OOQV<<Jj<<JjO$-_QtO'#FaOOQS'#Fc'#FcO$-oQdO'#FbO$.aQdO'#FbOOQS'#Fb'#FbO$.fQdO'#IYO$)VQdO'#FiO$)VQdO'#FiO$.}QdO'#FjO$)VQdO'#FkO$/UQdO'#IZOOQS'#IZ'#IZO$/sQdO,5;yOOQS<<KU<<KUO$/{QdO<<KUO$0]QdOANB]O$0mQdOANB]O$0uQdO'#H_OOQS'#H_'#H_O1sQdO'#DcO$1`QdO,5=xOOQSANBSANBSOOOO7+)m7+)mO$1wQdO7+)mOOQVLD*wLD*wOOQVANARANARO5rQ!fO'#GaO$2PQtO,5<SO$)VQdO'#FmOOQS,5<W,5<WOOQS'#Fd'#FdO$2qQdO,5;|O$2vQdO,5;|OOQS'#Fg'#FgO$)VQdO'#G`O$3hQdO,5<QO$4SQdO,5>tO$4dQdO,5>tO1XQdO,5<PO$4uQdO,5<TO$4zQdO,5<TO$)VQdO'#I[O$5PQdO'#I[O$5UQdO,5<UOOQS,5<V,5<VO'vQdO'#FpOOQU1G1e1G1eO4iQdO1G1eOOQSAN@pAN@pO$5ZQdOG27wO$5kQdO,59}OOQS1G3d1G3dOOOO<<MX<<MXOOQS,5<{,5<{OOQS-E:_-E:_O$5pQtO'#FaO$5wQdO'#I]O$6VQdO'#I]O$6_QdO,5<XOOQS1G1h1G1hO$6dQdO1G1hO$6iQdO,5<zOOQS-E:^-E:^O$7TQdO,5=OO$7lQdO1G4`OOQS-E:b-E:bOOQS1G1k1G1kOOQS1G1o1G1oO$7|QdO,5>vO$)VQdO,5>vOOQS1G1p1G1pO$8[QtO,5<[OOQU7+'P7+'PO$+cQdO1G/iO$)VQdO,5<YO$8cQdO,5>wO$8jQdO,5>wOOQS1G1s1G1sOOQS7+'S7+'SP$)VQdO'#GdO$8rQdO1G4bO$8|QdO1G4bO$9UQdO1G4bOOQS7+%T7+%TO$9dQdO1G1tO$9rQtO'#FaO$9yQdO,5<}OOQS,5<},5<}O$:XQdO1G4cOOQS-E:a-E:aO$)VQdO,5<|O$:`QdO,5<|O$:eQdO7+)|OOQS-E:`-E:`O$:oQdO7+)|O$)VQdO,5<ZP$)VQdO'#GcO$:wQdO1G2hO$)VQdO1G2hP$;VQdO'#GbO$;^QdO<<MhO$;hQdO1G1uO$;vQdO7+(SO8sQdO'#C}O8sQdO,59bO8sQdO,59bO8sQdO,59bO$<UQtO,5=`O8sQdO1G.|O0rQdO1G/XO0rQdO7+$pP$<iQdO'#GOO'vQdO'#GtO$<vQdO,59bO$<{QdO,59bO$=SQdO,59mO$=XQdO1G/UO1sQdO'#DRO8sQdO,59j\",\n  stateData: \"$=r~O%cOS%^OSSOS%]PQ~OPdOVaOfoOhYOopOs!POvqO!PrO!Q{O!T!SO!U!RO!XZO!][O!h`O!r`O!s`O!t`O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#l!QO#o!TO#s!UO#u!VO#z!WO#}hO$P!XO%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~O%]!YO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%j![O%k!]O%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aO~Ok%xXl%xXm%xXn%xXo%xXp%xXs%xXz%xX{%xX!x%xX#g%xX%[%xX%_%xX%z%xXg%xX!T%xX!U%xX%{%xX!W%xX![%xX!Q%xX#[%xXt%xX!m%xX~P%SOfoOhYO!XZO!][O!h`O!r`O!s`O!t`O%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~Oz%wX{%wX#g%wX%[%wX%_%wX%z%wX~Ok!pOl!qOm!oOn!oOo!rOp!sOs!tO!x%wX~P)pOV!zOg!|Oo0cOv0qO!PrO~P'vOV#OOo0cOv0qO!W#PO~P'vOV#SOa#TOo0cOv0qO![#UO~P'vOQ#XO%`#XO%a#ZO~OQ#^OR#[O%`#^O%a#`O~OV%iX_%iXa%iXh%iXk%iXl%iXm%iXn%iXo%iXp%iXs%iXz%iX!X%iX!f%iX%j%iX%k%iX%l%iX%m%iX%n%iX%o%iX%p%iX%q%iX%r%iX%s%iXg%iX!T%iX!U%iX~O&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O{%iX!x%iX#g%iX%[%iX%_%iX%z%iX%{%iX!W%iX![%iX!Q%iX#[%iXt%iX!m%iX~P,eOz#dO{%hX!x%hX#g%hX%[%hX%_%hX%z%hX~Oo0cOv0qO~P'vO#g#gO%[#iO%_#iO~O%uWO~O!T#nO#u!VO#z!WO#}hO~OopO~P'vOV#sOa#tO%uWO{wP~OV#xOo0cOv0qO!Q#yO~P'vO{#{O!x$QO%z#|O#g!yX%[!yX%_!yX~OV#xOo0cOv0qO#g#SX%[#SX%_#SX~P'vOo0cOv0qO#g#WX%[#WX%_#WX~P'vOh$WO%uWO~O!f$YO!r$YO%uWO~OV$eO~P'vO!U$gO#s$hO#u$iO~O{$jO~OV$qO~P'vOS$sO%[$rO%c$tO~OV$}Oa$}Og%POo0cOv0qO~P'vOo0cOv0qO{%SO~P'vO&Y%UO~Oa!bOh!iO!X!kO!f!mOVba_bakbalbambanbaobapbasbazba{ba!xba#gba%[ba%_ba%jba%kba%lba%mba%nba%oba%pba%qba%rba%sba%zbagba!Tba!Uba%{ba!Wba![ba!Qba#[batba!mba~On%ZO~Oo%ZO~P'vOo0cO~P'vOk0eOl0fOm0dOn0dOo0mOp0nOs0rOg%wX!T%wX!U%wX%{%wX!W%wX![%wX!Q%wX#[%wX!m%wX~P)pO%{%]Og%vXz%vX!T%vX!U%vX!W%vX{%vX~Og%_Oz%`O!T%dO!U%cO~Og%_O~Oz%gO!T%dO!U%cO!W&SX~O!W%kO~Oz%lO{%nO!T%dO!U%cO![%}X~O![%rO~O![%sO~OQ#XO%`#XO%a%uO~OV%wOo0cOv0qO!PrO~P'vOQ#^OR#[O%`#^O%a%zO~OV!qa_!qaa!qah!qak!qal!qam!qan!qao!qap!qas!qaz!qa{!qa!X!qa!f!qa!x!qa#g!qa%[!qa%_!qa%j!qa%k!qa%l!qa%m!qa%n!qa%o!qa%p!qa%q!qa%r!qa%s!qa%z!qag!qa!T!qa!U!qa%{!qa!W!qa![!qa!Q!qa#[!qat!qa!m!qa~P#yOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P%SOV&OOopOvqO{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P'vOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#g$zX%[$zX%_$zX~P'vO#g#gO%[&TO%_&TO~O!f&UOh&sX%[&sXz&sX#[&sX#g&sX%_&sX#Z&sXg&sX~Oh!iO%[&WO~Okealeameaneaoeapeaseazea{ea!xea#gea%[ea%_ea%zeagea!Tea!Uea%{ea!Wea![ea!Qea#[eatea!mea~P%SOsqazqa{qa#gqa%[qa%_qa%zqa~Ok!pOl!qOm!oOn!oOo!rOp!sO!xqa~PE`O%z&YOz%yX{%yX~O%uWOz%yX{%yX~Oz&]O{wX~O{&_O~Oz%lO#g%}X%[%}X%_%}Xg%}X{%}X![%}X!m%}X%z%}X~OV0lOo0cOv0qO!PrO~P'vO%z#|O#gUa%[Ua%_Ua~Oz&hO#g&PX%[&PX%_&PXn&PX~P%SOz&kO!Q&jO#g#Wa%[#Wa%_#Wa~Oz&lO#[&nO#g&rX%[&rX%_&rXg&rX~O!f$YO!r$YO#Z&qO%uWO~O#Z&qO~Oz&sO#g&tX%[&tX%_&tX~Oz&uO#g&pX%[&pX%_&pX{&pX~O!X&wO%z&xO~Oz&|On&wX~P%SOn'PO~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO%['UO~P'vOt'YO#p'WO#q'XOP#naV#naf#nah#nao#nas#nav#na!P#na!Q#na!T#na!U#na!X#na!]#na!h#na!r#na!s#na!t#na!{#na!}#na#P#na#R#na#T#na#X#na#Z#na#^#na#_#na#a#na#c#na#l#na#o#na#s#na#u#na#z#na#}#na$P#na%X#na%o#na%p#na%t#na%u#na&Z#na&[#na&]#na&^#na&_#na&`#na&a#na&b#na&c#na&d#na&e#na&f#na&g#na&h#na&i#na&j#na%Z#na%_#na~Oz'ZO#[']O{&xX~Oh'_O!X&wO~Oh!iO{$jO!X&wO~O{'eO~P%SO%['hO~OS'iO%['hO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%k!]O~P!#lO%kWi~P!#lOV!aO_!aOa!bOh!iO!X!kO!f!mO%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%m!_O%n!_O~P!&gO%mWi%nWi~P!&gOa!bOh!iO!X!kO!f!mOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%mWi%nWi%oWi%pWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~OV!aO_!aO%q!aO%r!aO%s!aO~P!)eOVWi_Wi%qWi%rWi%sWi~P!)eO!T%dO!U%cOg&VXz&VX~O%z'kO%{'kO~P,eOz'mOg&UX~Og'oO~Oz'pO{'rO!W&XX~Oo0cOv0qOz'pO{'sO!W&XX~P'vO!W'uO~Om!oOn!oOo!rOp!sOkjisjizji{ji!xji#gji%[ji%_ji%zji~Ol!qO~P!.WOlji~P!.WOk0eOl0fOm0dOn0dOo0mOp0nO~Ot'wO~P!/aOV'|Og'}Oo0cOv0qO~P'vOg'}Oz(OO~Og(QO~O!U(SO~Og(TOz(OO!T%dO!U%cO~P%SOk0eOl0fOm0dOn0dOo0mOp0nOgqa!Tqa!Uqa%{qa!Wqa![qa!Qqa#[qatqa!mqa~PE`OV'|Oo0cOv0qO!W&Sa~P'vOz(WO!W&Sa~O!W(XO~Oz(WO!T%dO!U%cO!W&Sa~P%SOV(]Oo0cOv0qO![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~P'vOz(^O![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~O![(aO~Oz(^O!T%dO!U%cO![%}a~P%SOz(dO!T%dO!U%cO![&Ta~P%SOz(gO{&lX![&lX!m&lX%z&lX~O{(kO![(mO!m(nO%z(jO~OV&OOopOvqO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~P'vOz(pO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~O!f&UOh&sa%[&saz&sa#[&sa#g&sa%_&sa#Z&sag&sa~O%[(uO~OV#sOa#tO%uWO~Oz&]O{wa~OopOvqO~P'vOz(^O#g%}a%[%}a%_%}ag%}a{%}a![%}a!m%}a%z%}a~P%SOz(zO#g%hX%[%hX%_%hX%z%hX~O%z#|O#gUi%[Ui%_Ui~O#g&Pa%[&Pa%_&Pan&Pa~P'vOz(}O#g&Pa%[&Pa%_&Pan&Pa~O%uWO#g&ra%[&ra%_&rag&ra~Oz)SO#g&ra%[&ra%_&rag&ra~Og)VO~OV)WOh$WO%uWO~O#Z)XO~O%uWO#g&ta%[&ta%_&ta~Oz)ZO#g&ta%[&ta%_&ta~Oo0cOv0qO#g&pa%[&pa%_&pa{&pa~P'vOz)^O#g&pa%[&pa%_&pa{&pa~OV)`Oa)`O%uWO~O%z)eO~Ot)hO#j)gOP#hiV#hif#hih#hio#his#hiv#hi!P#hi!Q#hi!T#hi!U#hi!X#hi!]#hi!h#hi!r#hi!s#hi!t#hi!{#hi!}#hi#P#hi#R#hi#T#hi#X#hi#Z#hi#^#hi#_#hi#a#hi#c#hi#l#hi#o#hi#s#hi#u#hi#z#hi#}#hi$P#hi%X#hi%o#hi%p#hi%t#hi%u#hi&Z#hi&[#hi&]#hi&^#hi&_#hi&`#hi&a#hi&b#hi&c#hi&d#hi&e#hi&f#hi&g#hi&h#hi&i#hi&j#hi%Z#hi%_#hi~Ot)iOP#kiV#kif#kih#kio#kis#kiv#ki!P#ki!Q#ki!T#ki!U#ki!X#ki!]#ki!h#ki!r#ki!s#ki!t#ki!{#ki!}#ki#P#ki#R#ki#T#ki#X#ki#Z#ki#^#ki#_#ki#a#ki#c#ki#l#ki#o#ki#s#ki#u#ki#z#ki#}#ki$P#ki%X#ki%o#ki%p#ki%t#ki%u#ki&Z#ki&[#ki&]#ki&^#ki&_#ki&`#ki&a#ki&b#ki&c#ki&d#ki&e#ki&f#ki&g#ki&h#ki&i#ki&j#ki%Z#ki%_#ki~OV)kOn&wa~P'vOz)lOn&wa~Oz)lOn&wa~P%SOn)pO~O%Y)tO~Ot)wO#p'WO#q)vOP#niV#nif#nih#nio#nis#niv#ni!P#ni!Q#ni!T#ni!U#ni!X#ni!]#ni!h#ni!r#ni!s#ni!t#ni!{#ni!}#ni#P#ni#R#ni#T#ni#X#ni#Z#ni#^#ni#_#ni#a#ni#c#ni#l#ni#o#ni#s#ni#u#ni#z#ni#}#ni$P#ni%X#ni%o#ni%p#ni%t#ni%u#ni&Z#ni&[#ni&]#ni&^#ni&_#ni&`#ni&a#ni&b#ni&c#ni&d#ni&e#ni&f#ni&g#ni&h#ni&i#ni&j#ni%Z#ni%_#ni~OV)zOo0cOv0qO{$jO~P'vOo0cOv0qO{&xa~P'vOz*OO{&xa~OV*SOa*TOg*WO%q*UO%uWO~O{$jO&{*YO~Oh'_O~Oh!iO{$jO~O%[*_O~O%[*aO~OV$}Oa$}Oo0cOv0qOg&Ua~P'vOz*dOg&Ua~Oo0cOv0qO{*gO!W&Xa~P'vOz*hO!W&Xa~Oo0cOv0qOz*hO{*kO!W&Xa~P'vOo0cOv0qOz*hO!W&Xa~P'vOz*hO{*kO!W&Xa~Om0dOn0dOo0mOp0nOgjikjisjizji!Tji!Uji%{ji!Wji{ji![ji#gji%[ji%_ji!Qji#[jitji!mji%zji~Ol0fO~P!N_Olji~P!N_OV'|Og*pOo0cOv0qO~P'vOn*rO~Og*pOz*tO~Og*uO~OV'|Oo0cOv0qO!W&Si~P'vOz*vO!W&Si~O!W*wO~OV(]Oo0cOv0qO![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~P'vOz*zO!T%dO!U%cO![&Ti~Oz*}O![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~O![+OO~Oa+QOo0cOv0qO![&Ti~P'vOz*zO![&Ti~O![+SO~OV+UOo0cOv0qO{&la![&la!m&la%z&la~P'vOz+VO{&la![&la!m&la%z&la~O!]+YO&n+[O![!nX~O![+^O~O{(kO![+_O~O{(kO![+_O!m+`O~OV&OOopOvqO{%hq!x%hq#g%hq%[%hq%_%hq%z%hq~P'vOz$ri{$ri!x$ri#g$ri%[$ri%_$ri%z$ri~P%SOV&OOopOvqO~P'vOV&OOo0cOv0qO#g%ha%[%ha%_%ha%z%ha~P'vOz+aO#g%ha%[%ha%_%ha%z%ha~Oz$ia#g$ia%[$ia%_$ian$ia~P%SO#g&Pi%[&Pi%_&Pin&Pi~P'vOz+dO#g#Wq%[#Wq%_#Wq~O#[+eOz$va#g$va%[$va%_$vag$va~O%uWO#g&ri%[&ri%_&rig&ri~Oz+gO#g&ri%[&ri%_&rig&ri~OV+iOh$WO%uWO~O%uWO#g&ti%[&ti%_&ti~Oo0cOv0qO#g&pi%[&pi%_&pi{&pi~P'vO{#{Oz#eX!W#eX~Oz+mO!W&uX~O!W+oO~Ot+rO#j)gOP#hqV#hqf#hqh#hqo#hqs#hqv#hq!P#hq!Q#hq!T#hq!U#hq!X#hq!]#hq!h#hq!r#hq!s#hq!t#hq!{#hq!}#hq#P#hq#R#hq#T#hq#X#hq#Z#hq#^#hq#_#hq#a#hq#c#hq#l#hq#o#hq#s#hq#u#hq#z#hq#}#hq$P#hq%X#hq%o#hq%p#hq%t#hq%u#hq&Z#hq&[#hq&]#hq&^#hq&_#hq&`#hq&a#hq&b#hq&c#hq&d#hq&e#hq&f#hq&g#hq&h#hq&i#hq&j#hq%Z#hq%_#hq~On$|az$|a~P%SOV)kOn&wi~P'vOz+yOn&wi~Oz,TO{$jO#[,TO~O#q,VOP#nqV#nqf#nqh#nqo#nqs#nqv#nq!P#nq!Q#nq!T#nq!U#nq!X#nq!]#nq!h#nq!r#nq!s#nq!t#nq!{#nq!}#nq#P#nq#R#nq#T#nq#X#nq#Z#nq#^#nq#_#nq#a#nq#c#nq#l#nq#o#nq#s#nq#u#nq#z#nq#}#nq$P#nq%X#nq%o#nq%p#nq%t#nq%u#nq&Z#nq&[#nq&]#nq&^#nq&_#nq&`#nq&a#nq&b#nq&c#nq&d#nq&e#nq&f#nq&g#nq&h#nq&i#nq&j#nq%Z#nq%_#nq~O#[,WOz%Oa{%Oa~Oo0cOv0qO{&xi~P'vOz,YO{&xi~O{#{O%z,[Og&zXz&zX~O%uWOg&zXz&zX~Oz,`Og&yX~Og,bO~O%Y,eO~O!T%dO!U%cOg&Viz&Vi~OV$}Oa$}Oo0cOv0qOg&Ui~P'vO{,hOz$la!W$la~Oo0cOv0qO{,iOz$la!W$la~P'vOo0cOv0qO{*gO!W&Xi~P'vOz,lO!W&Xi~Oo0cOv0qOz,lO!W&Xi~P'vOz,lO{,oO!W&Xi~Og$hiz$hi!W$hi~P%SOV'|Oo0cOv0qO~P'vOn,qO~OV'|Og,rOo0cOv0qO~P'vOV'|Oo0cOv0qO!W&Sq~P'vOz$gi![$gi#g$gi%[$gi%_$gig$gi{$gi!m$gi%z$gi~P%SOV(]Oo0cOv0qO~P'vOa+QOo0cOv0qO![&Tq~P'vOz,sO![&Tq~O![,tO~OV(]Oo0cOv0qO![%}q#g%}q%[%}q%_%}qg%}q{%}q!m%}q%z%}q~P'vO{,uO~OV+UOo0cOv0qO{&li![&li!m&li%z&li~P'vOz,zO{&li![&li!m&li%z&li~O!]+YO&n+[O![!na~O{(kO![,}O~OV&OOo0cOv0qO#g%hi%[%hi%_%hi%z%hi~P'vOz-OO#g%hi%[%hi%_%hi%z%hi~O%uWO#g&rq%[&rq%_&rqg&rq~Oz-RO#g&rq%[&rq%_&rqg&rq~OV)`Oa)`O%uWO!W&ua~Oz-TO!W&ua~On$|iz$|i~P%SOV)kO~P'vOV)kOn&wq~P'vOt-XOP#myV#myf#myh#myo#mys#myv#my!P#my!Q#my!T#my!U#my!X#my!]#my!h#my!r#my!s#my!t#my!{#my!}#my#P#my#R#my#T#my#X#my#Z#my#^#my#_#my#a#my#c#my#l#my#o#my#s#my#u#my#z#my#}#my$P#my%X#my%o#my%p#my%t#my%u#my&Z#my&[#my&]#my&^#my&_#my&`#my&a#my&b#my&c#my&d#my&e#my&f#my&g#my&h#my&i#my&j#my%Z#my%_#my~O%Z-]O%_-]O~P`O#q-^OP#nyV#nyf#nyh#nyo#nys#nyv#ny!P#ny!Q#ny!T#ny!U#ny!X#ny!]#ny!h#ny!r#ny!s#ny!t#ny!{#ny!}#ny#P#ny#R#ny#T#ny#X#ny#Z#ny#^#ny#_#ny#a#ny#c#ny#l#ny#o#ny#s#ny#u#ny#z#ny#}#ny$P#ny%X#ny%o#ny%p#ny%t#ny%u#ny&Z#ny&[#ny&]#ny&^#ny&_#ny&`#ny&a#ny&b#ny&c#ny&d#ny&e#ny&f#ny&g#ny&h#ny&i#ny&j#ny%Z#ny%_#ny~Oz-aO{$jO#[-aO~Oo0cOv0qO{&xq~P'vOz-dO{&xq~O%z,[Og&zaz&za~OV*SOa*TO%q*UO%uWOg&ya~Oz-hOg&ya~O$S-lO~OV$}Oa$}Oo0cOv0qO~P'vOo0cOv0qO{-mOz$li!W$li~P'vOo0cOv0qOz$li!W$li~P'vO{-mOz$li!W$li~Oo0cOv0qO{*gO~P'vOo0cOv0qO{*gO!W&Xq~P'vOz-pO!W&Xq~Oo0cOv0qOz-pO!W&Xq~P'vOs-sO!T%dO!U%cOg&Oq!W&Oq![&Oqz&Oq~P!/aOa+QOo0cOv0qO![&Ty~P'vOz$ji![$ji~P%SOa+QOo0cOv0qO~P'vOV+UOo0cOv0qO~P'vOV+UOo0cOv0qO{&lq![&lq!m&lq%z&lq~P'vO{(kO![-xO!m-yO%z-wO~OV&OOo0cOv0qO#g%hq%[%hq%_%hq%z%hq~P'vO%uWO#g&ry%[&ry%_&ryg&ry~OV)`Oa)`O%uWO!W&ui~Ot-}OP#m!RV#m!Rf#m!Rh#m!Ro#m!Rs#m!Rv#m!R!P#m!R!Q#m!R!T#m!R!U#m!R!X#m!R!]#m!R!h#m!R!r#m!R!s#m!R!t#m!R!{#m!R!}#m!R#P#m!R#R#m!R#T#m!R#X#m!R#Z#m!R#^#m!R#_#m!R#a#m!R#c#m!R#l#m!R#o#m!R#s#m!R#u#m!R#z#m!R#}#m!R$P#m!R%X#m!R%o#m!R%p#m!R%t#m!R%u#m!R&Z#m!R&[#m!R&]#m!R&^#m!R&_#m!R&`#m!R&a#m!R&b#m!R&c#m!R&d#m!R&e#m!R&f#m!R&g#m!R&h#m!R&i#m!R&j#m!R%Z#m!R%_#m!R~Oo0cOv0qO{&xy~P'vOV*SOa*TO%q*UO%uWOg&yi~O$S-lO%Z.VO%_.VO~OV.aOh._O!X.^O!].`O!h.YO!s.[O!t.[O%p.XO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O~Oo0cOv0qOz$lq!W$lq~P'vO{.fOz$lq!W$lq~Oo0cOv0qO{*gO!W&Xy~P'vOz.gO!W&Xy~Oo0cOv.kO~P'vOs-sO!T%dO!U%cOg&Oy!W&Oy![&Oyz&Oy~P!/aO{(kO![.nO~O{(kO![.nO!m.oO~OV*SOa*TO%q*UO%uWO~Oh.tO!f.rOz$TX#[$TX%j$TXg$TX~Os$TX{$TX!W$TX![$TX~P$,yO%o.vO%p.vOs$UXz$UX{$UX#[$UX%j$UX!W$UXg$UX![$UX~O!h.xO~Oz.|O#[/OO%j.yOs&|X{&|X!W&|Xg&|X~Oa/RO~P$)cOh.tOs&}Xz&}X{&}X#[&}X%j&}X!W&}Xg&}X![&}X~Os/VO{$jO~Oo0cOv0qOz$ly!W$ly~P'vOo0cOv0qO{*gO!W&X!R~P'vOz/ZO!W&X!R~Og&RXs&RX!T&RX!U&RX!W&RX![&RXz&RX~P!/aOs-sO!T%dO!U%cOg&Qa!W&Qa![&Qaz&Qa~O{(kO![/^O~O!f.rOh$[as$[az$[a{$[a#[$[a%j$[a!W$[ag$[a![$[a~O!h/eO~O%o.vO%p.vOs$Uaz$Ua{$Ua#[$Ua%j$Ua!W$Uag$Ua![$Ua~O%j.yOs$Yaz$Ya{$Ya#[$Ya!W$Yag$Ya![$Ya~Os&|a{&|a!W&|ag&|a~P$)VOz/jOs&|a{&|a!W&|ag&|a~O!W/mO~Og/mO~O{/oO~O![/pO~Oo0cOv0qO{*gO!W&X!Z~P'vO{/sO~O%z/tO~P$,yOz/uO#[/OO%j.yOg'PX~Oz/uOg'PX~Og/wO~O!h/xO~O#[/OOs%Saz%Sa{%Sa%j%Sa!W%Sag%Sa![%Sa~O#[/OO%j.yOs%Waz%Wa{%Wa!W%Wag%Wa~Os&|i{&|i!W&|ig&|i~P$)VOz/zO#[/OO%j.yO!['Oa~O{$da~P%SOg'Pa~P$)VOz0SOg'Pa~Oa0UO!['Oi~P$)cOz0WO!['Oi~Oz0WO#[/OO%j.yO!['Oi~O#[/OO%j.yOg$biz$bi~O%z0ZO~P$,yO#[/OO%j.yOg%Vaz%Va~Og'Pi~P$)VO{0^O~Oa0UO!['Oq~P$)cOz0`O!['Oq~O#[/OO%j.yOz%Ui![%Ui~Oa0UO~P$)cOa0UO!['Oy~P$)cO#[/OO%j.yOg$ciz$ci~O#[/OO%j.yOz%Uq![%Uq~Oz+aO#g%ha%[%ha%_%ha%z%ha~P%SOV&OOo0cOv0qO~P'vOn0hO~Oo0hO~P'vO{0iO~Ot0jO~P!/aO&]&Z&j&h&i&g&f&d&e&c&b&`&a&_&^&[%u~\",\n  goto: \"!=l'QPPPPPP'RP'Z*s+]+v,b,}-kP.YP'Z.y.y'ZPPP'Z2cPPPPPP2c5VPP5VP7g7p=xPP={>m>pPP'Z'ZPP?PPP'Z'ZPP'Z'Z'Z'Z'Z?T?}'ZP@QP@WD_G{HPPHSH^Hb'ZPPPHeHn'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RP'RPHtIQIYPIaIgPIaPIaIaPPPIaPKuPLOLYL`KuPIaLiPIaPLpLvPLzM`M}NhLzLzNnN{LzLzLzLz! a! g! j! o! r! |!!S!!`!!r!!x!#S!#Y!#v!#|!$S!$^!$d!$j!$|!%W!%^!%d!%n!%t!%z!&Q!&W!&^!&h!&n!&x!'O!'X!'_!'n!'v!(Q!(XPPPPPPPPPPP!(_!(b!(h!(q!({!)WPPPPPPPPPPPP!-z!/`!3`!6pPP!6x!7X!7b!8Z!8Q!8d!8j!8m!8p!8s!8{!9lPPPPPPPPPPPPPPPPP!9o!9s!9yP!:_!:c!:o!:x!;U!;l!;o!;r!;x!<O!<U!<XP!<a!<j!=f!=i]eOn#g$j)t,P'}`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r}!cQ#c#p$R$d$p%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!P!dQ#c#p$R$d$p$u%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!R!eQ#c#p$R$d$p$u$v%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!T!fQ#c#p$R$d$p$u$v$w%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!V!gQ#c#p$R$d$p$u$v$w$x%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!X!hQ#c#p$R$d$p$u$v$w$x$y%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!]!hQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g'}TOTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r&cVOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/Z/s0c0d0e0f0h0i0j0k0n0r%mXOYZ[dnrxy}!P!Q!U!i!k#[#d#g#y#{#}$Q$h$j$}%S%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/Z0i0j0kQ#vqQ/[.kR0o0q't`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rh#jhz{$W$Z&l&q)S)X+f+g-RW#rq&].k0qQ$]|Q$a!OQ$n!VQ$o!WW$|!i'm*d,gS&[#s#tQ'S$iQ(s&UQ)U&nU)Y&s)Z+jW)a&w+m-T-{Q*Q']W*R'_,`-h.TQ+l)`S,_*S*TQ-Q+eQ-_,TQ-c,WQ.R-al.W-l.^._.a.z.|/R/j/o/t/y0U0Z0^Q/S.`Q/a.tQ/l/OU0P/u0S0[X0V/z0W0_0`R&Z#r!_!wYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZR%^!vQ!{YQ%x#[Q&d#}Q&g$QR,{+YT.j-s/s![!jQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0gQ&X#kQ'c$oR*^'dR'l$|Q%V!mR/_.r'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rS#a_#b!P.[-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rT#a_#bT#^^#_R(o%xa(l%x(n(o+`,{-y-z.oT+[(k+]R-z,{Q$PsQ+l)aR,^*RX#}s$O$P&fQ&y$aQ'a$nQ'd$oR)s'SQ)b&wV-S+m-T-{ZgOn$j)t,PXkOn)t,PQ$k!TQ&z$bQ&{$cQ'^$mQ'b$oQ)q'RQ)x'WQ){'XQ)|'YQ*Z'`S*]'c'dQ+s)gQ+u)hQ+v)iQ+z)oS+|)r*[Q,Q)vQ,R)wS,S)y)zQ,d*^Q-V+rQ-W+tQ-Y+{S-Z+},OQ-`,UQ-b,VQ-|-XQ.O-[Q.P-^Q.Q-_Q.p-}Q.q.RQ/W.dR/r/XWkOn)t,PR#mjQ'`$nS)r'S'aR,O)sQ,]*RR-f,^Q*['`Q+})rR-[,OZiOjn)t,PQ'f$pR*`'gT-j,e-ku.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^t.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^Q/S.`X0V/z0W0_0`!P.Z-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`Q.w.YR/f.xg.z.].{/b/i/n/|0O0Q0]0a0bu.b-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^X.u.W.b/a0PR/c.tV0R/u0S0[R/X.dQnOS#on,PR,P)tQ&^#uR(x&^S%m#R#wS(_%m(bT(b%p&`Q%a!yQ%h!}W(P%a%h(U(YQ(U%eR(Y%jQ&i$RR)O&iQ(e%qQ*{(`T+R(e*{Q'n%OR*e'nS'q%R%SY*i'q*j,m-q.hU*j'r's'tU,m*k*l*mS-q,n,oR.h-rQ#Y]R%t#YQ#_^R%y#_Q(h%vS+W(h+XR+X(iQ+](kR,|+]Q#b_R%{#bQ#ebQ%}#cW&Q#e%}({+bQ({&cR+b0gQ$OsS&e$O&fR&f$PQ&v$_R)_&vQ&V#jR(t&VQ&m$VS)T&m+hR+h)UQ$Z{R&p$ZQ&t$]R)[&tQ+n)bR-U+nQ#hfR&S#hQ)f&zR+q)fQ&}$dS)m&})nR)n'OQ'V$kR)u'VQ'[$lS*P'[,ZR,Z*QQ,a*VR-i,aWjOn)t,PR#ljQ-k,eR.U-kd.{.]/b/i/n/|0O0Q0]0a0bR/h.{U.s.W/a0PR/`.sQ/{/nS0X/{0YR0Y/|S/v/b/cR0T/vQ.}.]R/k.}R!ZPXmOn)t,PWlOn)t,PR'T$jYfOn$j)t,PR&R#g[sOn#g$j)t,PR&d#}&bQOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/Z/s0c0d0e0f0h0i0j0k0n0rQ!nTQ#caQ#poU$Rt%c(SS$d!R$gQ$p!XQ$u!cQ$v!dQ$w!eQ$x!fQ$y!gQ$z!hQ%e!zQ%j#OQ%p#SQ%q#TQ&`#xQ'O$eQ'g$qQ(q&OU(|&h(}+cW)j&|)l+x+yQ*o'|Q*x(]Q+w)kQ,v+QQ/q/VR0g0lQ!yYQ!}ZQ$b!PQ$c!QQ%R!kQ't%S^'{%`%g(O(W*q*t*v^*f'p*h,k,l-p.g/ZQ*l'rQ*m'sQ+t)gQ,j*gQ,n*kQ-n,hQ-o,iQ-r,oQ.e-mR/Y.f[bOn#g$j)t,P!^!vYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZQ#R[Q#fdS#wrxQ$UyW$_}$Q'P)pS$l!U$hW${!i'm*d,gS%v#[+Y`&P#d%|(p(r(z+a-O0kQ&a#yQ&b#{Q&c#}Q'j$}Q'z%^W([%l(^*y*}Q(`%nQ(i%wQ(v&ZS(y&_0iQ)P&jQ)Q&kU)]&u)^+kQ)d&xQ)y'WY)}'Z*O,X,Y-dQ*b'lS*n'w0jW+P(d*z,s,wW+T(g+V,y,zQ+p)eQ,U)zQ,c*YQ,x+UQ-P+dQ-e,]Q-v,uR.S-fhUOn#d#g$j%|&_'w(p(r)t,P%S!uYZ[drxy}!P!Q!U!i!k#[#y#{#}$Q$h$}%S%^%`%g%l%n%w&Z&j&k&u&x'P'W'Z'l'm'p'r's(O(W(^(d(g(z)^)e)g)p)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/Z0i0j0kQ#qpW%W!o!s0d0nQ%X!pQ%Y!qQ%[!tQ%f0cS'v%Z0hQ'x0eQ'y0fQ,p*rQ-u,qS.i-s/sR0p0rU#uq.k0qR(w&][cOn#g$j)t,PZ!xY#[#}$Q+YQ#W[Q#zrR$TxQ%b!yQ%i!}Q%o#RQ'j${Q(V%eQ(Z%jQ(c%pQ(f%qQ*|(`Q,f*bQ-t,pQ.m-uR/].lQ$StQ(R%cR*s(SQ.l-sR/}/sR#QZR#V[R%Q!iQ%O!iV*c'm*d,g!]!lQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0gR%T!kT#]^#_Q%x#[R,{+YQ(m%xS+_(n(oQ,}+`Q-x,{S.n-y-zR/^.oT+Z(k+]Q$`}Q&g$QQ)o'PR+{)pQ$XzQ)W&qR+i)XQ$XzQ&o$WQ)W&qR+i)XQ#khW$Vz$W&q)XQ$[{Q&r$ZZ)R&l)S+f+g-RR$^|R)c&wXlOn)t,PQ$f!RR'Q$gQ$m!UR'R$hR*X'_Q*V'_V-g,`-h.TQ.d-lQ/P.^R/Q._U.]-l.^._Q/U.aQ/b.tQ/g.zU/i.|/j/yQ/n/RQ/|/oQ0O/tU0Q/u0S0[Q0]0UQ0a0ZR0b0^R/T.`R/d.t\",\n  nodeNames: \"âš  print Escape { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatSelfDoc FormatConversion FormatSpec FormatReplacement FormatSelfDoc ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard\",\n  maxTerm: 277,\n  context: trackIndent,\n  nodeProps: [\n    [\"isolate\", -5,4,71,72,73,77,\"\"],\n    [\"group\", -15,6,85,87,88,90,92,94,96,98,99,100,102,105,108,110,\"Statement Statement\",-22,8,18,21,25,40,49,50,56,57,60,61,62,63,64,67,70,71,72,79,80,81,82,\"Expression\",-10,114,116,119,121,122,126,128,133,135,138,\"Statement\",-9,143,144,147,148,150,151,152,153,154,\"Pattern\"],\n    [\"openedBy\", 23,\"(\",54,\"[\",58,\"{\"],\n    [\"closedBy\", 24,\")\",55,\"]\",59,\"}\"]\n  ],\n  propSources: [pythonHighlighting],\n  skippedNodes: [0,4],\n  repeatNodeCount: 34,\n  tokenData: \"!2|~R!`OX%TXY%oY[%T[]%o]p%Tpq%oqr'ars)Yst*xtu%Tuv,dvw-hwx.Uxy/tyz0[z{0r{|2S|}2p}!O3W!O!P4_!P!Q:Z!Q!R;k!R![>_![!]Do!]!^Es!^!_FZ!_!`Gk!`!aHX!a!b%T!b!cIf!c!dJU!d!eK^!e!hJU!h!i!#f!i!tJU!t!u!,|!u!wJU!w!x!.t!x!}JU!}#O!0S#O#P&o#P#Q!0j#Q#R!1Q#R#SJU#S#T%T#T#UJU#U#VK^#V#YJU#Y#Z!#f#Z#fJU#f#g!,|#g#iJU#i#j!.t#j#oJU#o#p!1n#p#q!1s#q#r!2a#r#s!2f#s$g%T$g;'SJU;'S;=`KW<%lOJU`%YT&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T`%lP;=`<%l%To%v]&n`%c_OX%TXY%oY[%T[]%o]p%Tpq%oq#O%T#O#P&o#P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To&tX&n`OY%TYZ%oZ]%T]^%o^#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc'f[&n`O!_%T!_!`([!`#T%T#T#U(r#U#f%T#f#g(r#g#h(r#h#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(cTmR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(yT!mR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk)aV&n`&[ZOr%Trs)vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk){V&n`Or%Trs*bs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk*iT&n`&^ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To+PZS_&n`OY*xYZ%TZ]*x]^%T^#o*x#o#p+r#p#q*x#q#r+r#r;'S*x;'S;=`,^<%lO*x_+wTS_OY+rZ]+r^;'S+r;'S;=`,W<%lO+r_,ZP;=`<%l+ro,aP;=`<%l*xj,kV%rQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-XT!xY&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-oV%lQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.]V&n`&ZZOw%Twx.rx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.wV&n`Ow%Twx/^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/eT&n`&]ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/{ThZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc0cTgR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk0yXVZ&n`Oz%Tz{1f{!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk1mVaR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk2ZV%oZ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc2wTzR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To3_W%pZ&n`O!_%T!_!`-Q!`!a3w!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Td4OT&{S&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk4fX!fQ&n`O!O%T!O!P5R!P!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5WV&n`O!O%T!O!P5m!P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5tT!rZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti6[a!hX&n`O!Q%T!Q![6T![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S6T#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti7fZ&n`O{%T{|8X|}%T}!O8X!O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8^V&n`O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8z]!hX&n`O!Q%T!Q![8s![!l%T!l!m9s!m#R%T#R#S8s#S#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti9zT!hX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk:bX%qR&n`O!P%T!P!Q:}!Q!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj;UV%sQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti;ro!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!d%T!d!e?q!e!g%T!g!h7a!h!l%T!l!m9s!m!q%T!q!rA]!r!z%T!z!{Bq!{#R%T#R#S>_#S#U%T#U#V?q#V#X%T#X#Y7a#Y#^%T#^#_9s#_#c%T#c#dA]#d#l%T#l#mBq#m#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti=xV&n`O!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti>fc!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S>_#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti?vY&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti@mY!hX&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiAbX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBUX!hX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBv]&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiCv]!hX&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToDvV{_&n`O!_%T!_!`E]!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TcEdT%{R&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkEzT#gZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkFbXmR&n`O!^%T!^!_F}!_!`([!`!a([!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjGUV%mQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkGrV%zZ&n`O!_%T!_!`([!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkH`WmR&n`O!_%T!_!`([!`!aHx!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjIPV%nQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkIoV_Q#}P&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToJ_]&n`&YS%uZO!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoKZP;=`<%lJUoKge&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!tJU!t!uLx!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#gLx#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoMRa&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUkN_V&n`&`ZOr%TrsNts#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkNyV&n`Or%Trs! `s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! gT&n`&bZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! }V&n`&_ZOw%Twx!!dx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!!iV&n`Ow%Twx!#Ox#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!#VT&n`&aZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!#oe&n`&YS%uZOr%Trs!%Qsw%Twx!&px!Q%T!Q![JU![!c%T!c!tJU!t!u!(`!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#g!(`#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!%XV&n`&dZOr%Trs!%ns#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!%sV&n`Or%Trs!&Ys#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&aT&n`&fZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&wV&n`&cZOw%Twx!'^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!'cV&n`Ow%Twx!'xx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!(PT&n`&eZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!(ia&n`&YS%uZOr%Trs!)nsw%Twx!+^x!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!)uV&n`&hZOr%Trs!*[s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*aV&n`Or%Trs!*vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*}T&n`&jZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!+eV&n`&gZOw%Twx!+zx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,PV&n`Ow%Twx!,fx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,mT&n`&iZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!-Vi&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!dJU!d!eLx!e!hJU!h!i!(`!i!}JU!}#R%T#R#SJU#S#T%T#T#UJU#U#VLx#V#YJU#Y#Z!(`#Z#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUo!.}a&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!0ZT!XZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc!0qT!WR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj!1XV%kQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!1sO!]~k!1zV%jR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!2fO![~i!2mT%tX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T\",\n  tokenizers: [legacyPrint, indentation, newlines, strings, 0, 1, 2, 3, 4],\n  topRules: {\"Script\":[0,5]},\n  specialized: [{term: 221, get: (value) => spec_identifier[value] || -1}],\n  tokenPrec: 7652\n});\n\nexport { parser };\n","import { parser } from '@lezer/python';\nimport { syntaxTree, LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { NodeWeakMap, IterMode } from '@lezer/common';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\n\nconst cache = /*@__PURE__*/new NodeWeakMap();\nconst ScopeNodes = /*@__PURE__*/new Set([\n    \"Script\", \"Body\",\n    \"FunctionDefinition\", \"ClassDefinition\", \"LambdaExpression\",\n    \"ForStatement\", \"MatchClause\"\n]);\nfunction defID(type) {\n    return (node, def, outer) => {\n        if (outer)\n            return false;\n        let id = node.node.getChild(\"VariableName\");\n        if (id)\n            def(id, type);\n        return true;\n    };\n}\nconst gatherCompletions = {\n    FunctionDefinition: /*@__PURE__*/defID(\"function\"),\n    ClassDefinition: /*@__PURE__*/defID(\"class\"),\n    ForStatement(node, def, outer) {\n        if (outer)\n            for (let child = node.node.firstChild; child; child = child.nextSibling) {\n                if (child.name == \"VariableName\")\n                    def(child, \"variable\");\n                else if (child.name == \"in\")\n                    break;\n            }\n    },\n    ImportStatement(_node, def) {\n        var _a, _b;\n        let { node } = _node;\n        let isFrom = ((_a = node.firstChild) === null || _a === void 0 ? void 0 : _a.name) == \"from\";\n        for (let ch = node.getChild(\"import\"); ch; ch = ch.nextSibling) {\n            if (ch.name == \"VariableName\" && ((_b = ch.nextSibling) === null || _b === void 0 ? void 0 : _b.name) != \"as\")\n                def(ch, isFrom ? \"variable\" : \"namespace\");\n        }\n    },\n    AssignStatement(node, def) {\n        for (let child = node.node.firstChild; child; child = child.nextSibling) {\n            if (child.name == \"VariableName\")\n                def(child, \"variable\");\n            else if (child.name == \":\" || child.name == \"AssignOp\")\n                break;\n        }\n    },\n    ParamList(node, def) {\n        for (let prev = null, child = node.node.firstChild; child; child = child.nextSibling) {\n            if (child.name == \"VariableName\" && (!prev || !/\\*|AssignOp/.test(prev.name)))\n                def(child, \"variable\");\n            prev = child;\n        }\n    },\n    CapturePattern: /*@__PURE__*/defID(\"variable\"),\n    AsPattern: /*@__PURE__*/defID(\"variable\"),\n    __proto__: null\n};\nfunction getScope(doc, node) {\n    let cached = cache.get(node);\n    if (cached)\n        return cached;\n    let completions = [], top = true;\n    function def(node, type) {\n        let name = doc.sliceString(node.from, node.to);\n        completions.push({ label: name, type });\n    }\n    node.cursor(IterMode.IncludeAnonymous).iterate(node => {\n        if (node.name) {\n            let gather = gatherCompletions[node.name];\n            if (gather && gather(node, def, top) || !top && ScopeNodes.has(node.name))\n                return false;\n            top = false;\n        }\n        else if (node.to - node.from > 8192) {\n            // Allow caching for bigger internal nodes\n            for (let c of getScope(doc, node.node))\n                completions.push(c);\n            return false;\n        }\n    });\n    cache.set(node, completions);\n    return completions;\n}\nconst Identifier = /^[\\w\\xa1-\\uffff][\\w\\d\\xa1-\\uffff]*$/;\nconst dontComplete = [\"String\", \"FormatString\", \"Comment\", \"PropertyName\"];\n/**\nCompletion source that looks up locally defined names in\nPython code.\n*/\nfunction localCompletionSource(context) {\n    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);\n    if (dontComplete.indexOf(inner.name) > -1)\n        return null;\n    let isWord = inner.name == \"VariableName\" ||\n        inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));\n    if (!isWord && !context.explicit)\n        return null;\n    let options = [];\n    for (let pos = inner; pos; pos = pos.parent) {\n        if (ScopeNodes.has(pos.name))\n            options = options.concat(getScope(context.state.doc, pos));\n    }\n    return {\n        options,\n        from: isWord ? inner.from : context.pos,\n        validFor: Identifier\n    };\n}\nconst globals = /*@__PURE__*/[\n    \"__annotations__\", \"__builtins__\", \"__debug__\", \"__doc__\", \"__import__\", \"__name__\",\n    \"__loader__\", \"__package__\", \"__spec__\",\n    \"False\", \"None\", \"True\"\n].map(n => ({ label: n, type: \"constant\" })).concat(/*@__PURE__*/[\n    \"ArithmeticError\", \"AssertionError\", \"AttributeError\", \"BaseException\", \"BlockingIOError\",\n    \"BrokenPipeError\", \"BufferError\", \"BytesWarning\", \"ChildProcessError\", \"ConnectionAbortedError\",\n    \"ConnectionError\", \"ConnectionRefusedError\", \"ConnectionResetError\", \"DeprecationWarning\",\n    \"EOFError\", \"Ellipsis\", \"EncodingWarning\", \"EnvironmentError\", \"Exception\", \"FileExistsError\",\n    \"FileNotFoundError\", \"FloatingPointError\", \"FutureWarning\", \"GeneratorExit\", \"IOError\",\n    \"ImportError\", \"ImportWarning\", \"IndentationError\", \"IndexError\", \"InterruptedError\",\n    \"IsADirectoryError\", \"KeyError\", \"KeyboardInterrupt\", \"LookupError\", \"MemoryError\",\n    \"ModuleNotFoundError\", \"NameError\", \"NotADirectoryError\", \"NotImplemented\", \"NotImplementedError\",\n    \"OSError\", \"OverflowError\", \"PendingDeprecationWarning\", \"PermissionError\", \"ProcessLookupError\",\n    \"RecursionError\", \"ReferenceError\", \"ResourceWarning\", \"RuntimeError\", \"RuntimeWarning\",\n    \"StopAsyncIteration\", \"StopIteration\", \"SyntaxError\", \"SyntaxWarning\", \"SystemError\",\n    \"SystemExit\", \"TabError\", \"TimeoutError\", \"TypeError\", \"UnboundLocalError\", \"UnicodeDecodeError\",\n    \"UnicodeEncodeError\", \"UnicodeError\", \"UnicodeTranslateError\", \"UnicodeWarning\", \"UserWarning\",\n    \"ValueError\", \"Warning\", \"ZeroDivisionError\"\n].map(n => ({ label: n, type: \"type\" }))).concat(/*@__PURE__*/[\n    \"bool\", \"bytearray\", \"bytes\", \"classmethod\", \"complex\", \"float\", \"frozenset\", \"int\", \"list\",\n    \"map\", \"memoryview\", \"object\", \"range\", \"set\", \"staticmethod\", \"str\", \"super\", \"tuple\", \"type\"\n].map(n => ({ label: n, type: \"class\" }))).concat(/*@__PURE__*/[\n    \"abs\", \"aiter\", \"all\", \"anext\", \"any\", \"ascii\", \"bin\", \"breakpoint\", \"callable\", \"chr\",\n    \"compile\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"exec\", \"exit\", \"filter\",\n    \"format\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\", \"input\", \"isinstance\",\n    \"issubclass\", \"iter\", \"len\", \"license\", \"locals\", \"max\", \"min\", \"next\", \"oct\", \"open\",\n    \"ord\", \"pow\", \"print\", \"property\", \"quit\", \"repr\", \"reversed\", \"round\", \"setattr\", \"slice\",\n    \"sorted\", \"sum\", \"vars\", \"zip\"\n].map(n => ({ label: n, type: \"function\" })));\nconst snippets = [\n    /*@__PURE__*/snippetCompletion(\"def ${name}(${params}):\\n\\t${}\", {\n        label: \"def\",\n        detail: \"function\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for ${name} in ${collection}:\\n\\t${}\", {\n        label: \"for\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"while ${}:\\n\\t${}\", {\n        label: \"while\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"try:\\n\\t${}\\nexcept ${error}:\\n\\t${}\", {\n        label: \"try\",\n        detail: \"/ except block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if ${}:\\n\\t\\n\", {\n        label: \"if\",\n        detail: \"block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if ${}:\\n\\t${}\\nelse:\\n\\t${}\", {\n        label: \"if\",\n        detail: \"/ else block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"class ${name}:\\n\\tdef __init__(self, ${params}):\\n\\t\\t\\t${}\", {\n        label: \"class\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import ${module}\", {\n        label: \"import\",\n        detail: \"statement\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"from ${module} import ${names}\", {\n        label: \"from\",\n        detail: \"import\",\n        type: \"keyword\"\n    })\n];\n/**\nAutocompletion for built-in Python globals and keywords.\n*/\nconst globalCompletion = /*@__PURE__*/ifNotIn(dontComplete, /*@__PURE__*/completeFromList(/*@__PURE__*/globals.concat(snippets)));\n\nfunction innerBody(context) {\n    let { node, pos } = context;\n    let lineIndent = context.lineIndent(pos, -1);\n    let found = null;\n    for (;;) {\n        let before = node.childBefore(pos);\n        if (!before) {\n            break;\n        }\n        else if (before.name == \"Comment\") {\n            pos = before.from;\n        }\n        else if (before.name == \"Body\") {\n            if (context.baseIndentFor(before) + context.unit <= lineIndent)\n                found = before;\n            node = before;\n        }\n        else if (before.type.is(\"Statement\")) {\n            node = before;\n        }\n        else {\n            break;\n        }\n    }\n    return found;\n}\nfunction indentBody(context, node) {\n    let base = context.baseIndentFor(node);\n    let line = context.lineAt(context.pos, -1), to = line.from + line.text.length;\n    // Don't consider blank, deindented lines at the end of the\n    // block part of the block\n    if (/^\\s*($|#)/.test(line.text) &&\n        context.node.to < to + 100 &&\n        !/\\S/.test(context.state.sliceDoc(to, context.node.to)) &&\n        context.lineIndent(context.pos, -1) <= base)\n        return null;\n    // A normally deindenting keyword that appears at a higher\n    // indentation than the block should probably be handled by the next\n    // level\n    if (/^\\s*(else:|elif |except |finally:)/.test(context.textAfter) && context.lineIndent(context.pos, -1) > base)\n        return null;\n    return base + context.unit;\n}\n/**\nA language provider based on the [Lezer Python\nparser](https://github.com/lezer-parser/python), extended with\nhighlighting and indentation information.\n*/\nconst pythonLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"python\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Body: context => {\n                    var _a;\n                    let inner = innerBody(context);\n                    return (_a = indentBody(context, inner || context.node)) !== null && _a !== void 0 ? _a : context.continue();\n                },\n                IfStatement: cx => /^\\s*(else:|elif )/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),\n                \"ForStatement WhileStatement\": cx => /^\\s*else:/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),\n                TryStatement: cx => /^\\s*(except |finally:|else:)/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),\n                \"TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression\": /*@__PURE__*/delimitedIndent({ closing: \")\" }),\n                \"DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression\": /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                \"ArrayExpression ArrayComprehensionExpression\": /*@__PURE__*/delimitedIndent({ closing: \"]\" }),\n                \"String FormatString\": () => null,\n                Script: context => {\n                    var _a;\n                    let inner = innerBody(context);\n                    return (_a = (inner && indentBody(context, inner))) !== null && _a !== void 0 ? _a : context.continue();\n                }\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"ArrayExpression DictionaryExpression SetExpression TupleExpression\": foldInside,\n                Body: (node, state) => ({ from: node.from + 1, to: node.to - (node.to == state.doc.length ? 0 : 1) })\n            })\n        ],\n    }),\n    languageData: {\n        closeBrackets: {\n            brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"'],\n            stringPrefixes: [\"f\", \"fr\", \"rf\", \"r\", \"u\", \"b\", \"br\", \"rb\",\n                \"F\", \"FR\", \"RF\", \"R\", \"U\", \"B\", \"BR\", \"RB\"]\n        },\n        commentTokens: { line: \"#\" },\n        indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/\n    }\n});\n/**\nPython language support.\n*/\nfunction python() {\n    return new LanguageSupport(pythonLanguage, [\n        pythonLanguage.data.of({ autocomplete: localCompletionSource }),\n        pythonLanguage.data.of({ autocomplete: globalCompletion }),\n    ]);\n}\n\nexport { globalCompletion, localCompletionSource, python, pythonLanguage };\n"],"names":["Stack","constructor","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","parent","this","toString","filter","_","i","concat","start","cx","parser","context","StackContext","pushState","push","length","reduce","action","_a","depth","type","setLookAhead","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","base","ranges","from","size","nodeSet","types","isAnonymous","lastBigReductionStart","bigReductionCount","lastBigReductionSize","count","stateFlag","baseStateID","pop","term","end","isReduce","cur","top","index","shift","shiftContext","maxNode","nextState","apply","next","nextStart","nextEnd","useNode","value","reused","updateContext","tracker","reuse","stream","reset","split","off","slice","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","best","s","some","v","result","forceReduce","validAction","target","backup","findForcedReduction","seen","explore","includes","allActions","rDepth","found","forceAll","deadEnd","data","restart","sameState","other","dialectEnabled","dialectID","dialect","flags","emitContext","last","hash","emitLookAhead","newCx","close","strict","goto","StackBufferCursor","maybeNext","create","id","fork","decodeArray","input","Type","Uint16Array","array","out","charCodeAt","stop","digit","CachedToken","extended","mask","nullToken","InputStream","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","range","to","readNext","resolveOffset","offset","assoc","clipPos","Math","max","peek","idx","resolved","acceptToken","endOffset","RangeError","acceptTokenTo","endPos","getChunk","nextChunk","advance","n","setDone","read","r","min","TokenGroup","group","precTable","precOffset","groupMask","scan","accEnd","allows","overrides","low","high","mid","readToken","tokenPrecTable","prototype","contextual","fallback","extend","ExternalTokenizer","options","findOffset","prev","tableData","tableOffset","iPrev","verbose","process","env","test","LOG","stackIDs","cutAt","tree","side","cursor","IterMode","IncludeAnonymous","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","FragmentCursor","fragments","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nodeAt","children","positions","Tree","prop","NodeProp","TokenCache","tokens","mainToken","actions","tokenizers","map","getActions","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","getMainToken","specialized","specializers","putAction","set","pair","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","parsedPos","stopped","stoppedTokens","newStacks","advanceStack","tok","finished","findFinished","console","log","stackID","stackToTree","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","outer","j","splice","stopAt","strictCx","cxHash","cached","match","contextHash","inner","defaultReduce","localStack","advanceFully","pushStackDedup","restarted","tokenEnd","force","forceBase","insert","build","topID","maxBufferLength","minRepeatType","WeakMap","get","String","fromCodePoint","Dialect","source","disabled","x","LRParser","Parser","spec","super","wrappers","version","nodeNames","repeatNodeCount","topTerms","Object","keys","topRules","nodeProps","setProp","nodeID","deserialize","propSpec","NodeSet","name","NodeType","define","undefined","props","indexOf","error","skipped","skippedNodes","propSources","DefaultBufferLength","tokenArray","tokenData","specializerSpecs","getSpecializer","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrec","termNames","parseDialect","createParse","parse","w","loose","table","groupTag","terminal","slot","flag","deflt","configure","config","copy","assign","info","t","find","external","contextTracker","wrap","hasWrappers","topNode","prec","values","part","Uint8Array","newline","bracketed","Set","isLineBreak","ch","isHex","newlines","cx_Bracketed","spaces","indentation","chars","indent","cx_DoubleQuote","cx_Long","cx_Raw","cx_Format","Context","topIndent","stringFlags","Map","trackIndent","has","space","countIndent","legacyPrint","fromCharCode","strings","quote","long","escapes","format","escaped","skipEscape","pythonHighlighting","styleTags","tags","modifier","controlKeyword","operatorKeyword","definitionKeyword","import","moduleKeyword","keyword","Boolean","bool","None","null","VariableName","variableName","function","definition","className","PropertyName","propertyName","Comment","lineComment","Number","number","string","FormatString","special","Escape","escape","UpdateOp","updateOperator","arithmeticOperator","BitOp","bitwiseOperator","CompareOp","compareOperator","AssignOp","definitionOperator","Ellipsis","punctuation","At","meta","paren","squareBracket","brace","derefOperator","separator","spec_identifier","__proto__","await","or","and","in","not","is","if","else","lambda","yield","async","for","True","False","del","pass","break","continue","return","raise","as","global","nonlocal","assert","elif","while","try","except","finally","with","def","class","case","Script","cache","NodeWeakMap","ScopeNodes","defID","node","getChild","gatherCompletions","FunctionDefinition","ClassDefinition","ForStatement","child","firstChild","ImportStatement","_node","_b","isFrom","AssignStatement","ParamList","CapturePattern","AsPattern","getScope","doc","completions","sliceString","label","iterate","gather","c","Identifier","dontComplete","localCompletionSource","syntaxTree","resolveInner","isWord","sliceDoc","explicit","validFor","globals","snippets","snippetCompletion","detail","globalCompletion","ifNotIn","completeFromList","innerBody","lineIndent","before","baseIndentFor","unit","indentBody","line","lineAt","text","textAfter","pythonLanguage","LRLanguage","indentNodeProp","add","Body","IfStatement","baseIndent","TryStatement","delimitedIndent","closing","foldNodeProp","foldInside","languageData","closeBrackets","brackets","stringPrefixes","commentTokens","indentOnInput","python","LanguageSupport","of","autocomplete"],"mappings":"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","x_google_ignoreList":[0,1,2]}